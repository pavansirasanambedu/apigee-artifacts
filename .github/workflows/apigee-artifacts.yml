name: Apigee Artifacts Export

on:
  workflow_dispatch:
    inputs:
      Workflow-run:
        type: choice
        description: Run type
        default: "manual"
        options:
          - schedule
          - manual
      deployment-org:
        type: choice
        description: Import to Org
        default: "test-schedule"
        options:
          - esi-apigee-x-394004
          - esi-apigee-x-3940042
      environment:
        type: string
        required: false
        default: "eval"
        description: Environment to deploy
  schedule:
    - cron: '30 15 * * *' # Scheduled to run every day at 21:00 IST (15:30 UTC)
env:
  TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
  current_timestamp: $(($(date +%s%N) / 1000000))

jobs:
  apigee-window-artifacts:
    name: FL Apigee Artifacts Export
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Check out Git repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: "${{ secrets.TOKEN_GIT }}"

      - id: 'auth'
        name: 'Authenticate to Google Apigee Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/127369686749/locations/global/workloadIdentityPools/pavan-apigee-git/providers/pavan-apigee-git'
          service_account: 'workload-identity-federation@esi-apigee-x-394004.iam.gserviceaccount.com'

      - name: Perform Apigee Export
        shell: pwsh
        run: |
          $env:git_token = "${{ secrets.TOKEN_GIT }}"
          $env:key = "${{ secrets.key }}"
          $env:org = "${{ secrets.APIGEE_ORG }}"
          $env:TOKEN = "${{ steps.auth.outputs.access_token }}"
          
          $env:FieldValuestoEncrypt = "name,value"
          $env:FIRST_LEVEL_OBJECT = "keyValueEntries"
          $env:appfieds = $env:APP_FIELDS

          $timestamp = $env:TIMESTAMP
          Write-Host "Time: $timestamp"
          

          if ( "${{ github.event_name }}" -eq "workflow_dispatch" ) {
              $env:run = "${{ github.event.inputs.Workflow-run }}"
              if ($env:run -eq "manual") {
                  Write-Host "Entered into Manual...!"
                  $org = "${{ github.event.inputs.deployment-org }}"
                  Write-Host $org
                  $env:org = $org
              }
          } else {
              Write-Host "Entered into Schedule...!"
          }
          
          Invoke-Pester ./scripts.ps1 -Passthru
      - name: Remove GCP Credentials JSON File
        run: rm gha-creds*.json

      - name: Debug Git Config
        run: |
          git config --list

      - name: Add local files to Git local branch
        run: |
            git config --global user.email "rajeshjanapati533@gmail.com"
            git config --global user.name "pavansirasanambedu"
            git add .

      - name: Check for delta changes - Git
        id: check_git_changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Local branch is not up to date with remote_branch. Pushing latest code to Git"
          else
            echo "Local branch is up to date with Remote branch."
            exit 0
          fi

      - name: Commit files to Git
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git commit -a -m "Apigee Artifacts Export Updates"
            exit 0
          fi

      - name: Debug Git Status
        run: |
          git status

      - name: Push changes to Git
        run: |
          git push origin artifacts

      - name: Get GitHub Workflow Information
        id: workflow_info
        run: |
            WORKFLOW_NAME="${{ github.workflow }}"
            RUN_ID="${{ github.run_id }}"
            RUN_NUMBER="${{ github.run_number }}"
    
            # Calculate the timestamp using a PowerShell script
            $now = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    
            echo "Workflow Name: $WORKFLOW_NAME"
            echo "Run ID: $RUN_ID"
            echo "Run Number: $RUN_NUMBER"
            echo "Timestamp: $now"

      - name: Get GitHub User Information
        id: github_user_info
        run: |
            USERNAME="${{ github.actor }}"
            EMAIL="${{ github.event.head_commit.author.email }}"
  
            echo "GitHub Actor (Username): $USERNAME"
            echo "GitHub Actor's Email: $EMAIL"
  
      - name: Send Notification to Teams
        run: |
          # Create a JSON payload with GitHub Actions details
          $JSON='{
              "title": "GitHub Actions Notification",
              "summary": "GitHub Actions workflow completed",
              "text": "Workflow Name: ${{ github.workflow }}\nRun ID: ${{ github.run_id }}\nRun Number: ${{ github.run_number }}\nTimestamp: $timestamp\nTriggered by ${{ github.actor }} (${{ github.event.head_commit.author.email }}) on branch ${{ github.ref }}. Status: ${{ job.status }}",
              "themeColor": "0078D4"
          }'

          # Send the JSON payload to the Teams webhook URL
          curl -X POST -H "Content-Type: application/json" -d "$JSON" "$TEAMS_WEBHOOK_URL"






          
      # - name: Send message to ms teams
      #   uses: dhollerbach/actions.send-message-to-ms-teams@1.0.10
      #   with:
      #     webhook: 'https://easystepinit.webhook.office.com/webhookb2/2d93a69e-2f5d-4f76-b33c-ccdac9390ed9@ad0d83ba-dcda-4c3f-883e-d27383db90fe/IncomingWebhook/10fe6614258f47699496a5f773738c82/d808ff93-7a2a-4f8e-90a9-e22af125d537'
      #     message: 'W00w it werked!'





























# name: Apigee Artifacts Export

# on:
#   workflow_dispatch:
#     inputs:
#       Workflow-run:
#         type: choice
#         description: manual-run
#         default: "manual"
#         options:
#           - schedule
#           - manual
#       deployment-org:
#         type: choice
#         description: Import to Org
#         default: "esi-apigee-x-394004"
#         options:
#           - esi-apigee-x-394004
#           - esi-apigee-x-3940042
#       environment:
#         type: string
#         required: false
#         default: "eval"
#         description: Environment to deploy

# env:
#   APIGEE_ENV: ${{ github.event.inputs.environment }}
#   run: ${{ github.event.inputs.Workflow-run }}
#   GITHUB_TOKEN: ${{ secrets.TOKEN_GIT }}
#   key: ${{ secrets.key }}
#   org: ${{ secrets.APIGEE_ORG }}
#   manual_org: ${{ github.event.inputs.deployment-org }}
#   FIELDS_TO_ENCRYPT: "name,value"
#   firstlevelobject: "keyValueEntries"
#   APP_FIELDS: "consumerKey,consumerSecret"

# jobs:
#   apigee-window-artifacts:
#     name: FL Apigee Artifacts Export
#     runs-on: ubuntu-latest

#     permissions:
#       contents: 'read'
#       id-token: 'write'

#     steps:
#       - name: Check out Git repository code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#           token: "${{ secrets.TOKEN_GIT }}"

#        # Configure Workload Identity Federation and generate an access token.
#       - id: 'auth'
#         name: 'Authenticate to Google Apigee Cloud'
#         uses: 'google-github-actions/auth@v1'
#         with:
#           token_format: 'access_token'
#           workload_identity_provider: 'projects/127369686749/locations/global/workloadIdentityPools/pavan-apigee-git/providers/pavan-apigee-git'
#           service_account: 'workload-identity-federation@esi-apigee-x-394004.iam.gserviceaccount.com'


#       - name: Perform Apigee Export
#         shell: pwsh
#         run: |
#           $env:git_token = "${{ secrets.TOKEN_GIT }}"
#           $env:key = "${{ secrets.key }}"
#           $env:org = "${{ secrets.APIGEE_ORG }}"
#           $env:TOKEN = "${{ steps.auth.outputs.access_token }}"
          
#           $env:FieldValuestoEncrypt = "name,value"
#           $env:FIRST_LEVEL_OBJECT = "keyValueEntries"
#           $env:appfieds = $env:APP_FIELDS
#           $env:run = $env:run
#           $env:manualorg = "${{ github.event.inputs.deployment-org }}"

#           Invoke-Pester ./scripts.ps1 -Passthru

#           # ./scripts/apigee-artifacts.ps1 -AccessToken "${{ steps.auth.outputs.access_token }}" -org ${{ env.APIGEE_ORG }}  -env ${{ env.APIGEE_ENV }} -workflowmethod ${{ env.run }}
























# name: Apigee Artifacts Export
# on:
#   workflow_dispatch:

# env:
#   DEPLOYMENT_NAME: Apigee Artifacts Push # TODO: update to deployment name

#   # Default Target Apigee Organization et environment (can be also be dynamically defined in [Set Variables *] steps)
#   APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
#   APIGEE_ENV: ${{ secrets.APIGEE_ENV }}
#   GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
#   WORKFLOW_IDENTITY_FEDERATION_NAME: ${{ secrets.WORKFLOW_IDENTITY_FEDERATION_NAME }}
#   APIGEE_BASE_URL: "https://apigee.googleapis.com/v1/organizations/"
#   GITHUB_TOKEN: ${{ secrets.TOKEN_GIT }}
#   key: ${{ secrets.key }}
#   FIELDS_TO_ENCRYPT: "name,value"
#   firstlevelobject: "keyValueEntries"
#   APP_FIELDS: "consumerKey,consumerSecret"

# jobs:
#   apigee-window-artifacts:
#     name: FL Apigee Artifacts Export
#     runs-on: ubuntu-latest

#     permissions:
#       contents: 'read'
#       id-token: 'write'

#     steps:
#       - name: Check out Git repository code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#           token: "${{ secrets.TOKEN_GIT }}"

#       # Configure Workload Identity Federation and generate an access token.
#       - id: 'auth'
#         name: 'Authenticate to Google Apigee Cloud'
#         uses: 'google-github-actions/auth@v1'
#         with:
#           token_format: 'access_token'
#           workload_identity_provider: 'projects/127369686749/locations/global/workloadIdentityPools/pavan-apigee-git/providers/pavan-apigee-git'
#           service_account: 'workload-identity-federation@esi-apigee-x-394004.iam.gserviceaccount.com'

#       - name: Perform Apigee Export
#         shell: pwsh
#         run: |
#           $env:ORG = "${{ secrets.APIGEE_ORG }}"
#           $env:TOKEN = "${{ steps.auth.outputs.access_token }}"
#           $env:git_token = "${{ secrets.TOKEN_GIT }}"
#           $env:key = "${{ secrets.key }}"
          
#           $env:FieldValuestoEncrypt = "name,value"
#           $env:FIRST_LEVEL_OBJECT = "keyValueEntries"

#           # Split the comma-separated string into an array
#           $env:appfieds = $env:APP_FIELDS
          
#           Invoke-Pester ./scripts.ps1 -Passthru

#       - name: Remove GCP Credentials JSON File
#         run: rm gha-creds*.json

#       - name: Debug Git Config
#         run: |
#           git config --list

#       - name: Add local files to Git local branch
#         run: |
#             git config --global user.email "rajeshjanapati533@gmail.com"
#             git config --global user.name "pavansirasanambedu"
#             git add .

#       - name: Check for delta changes - Git
#         id: check_git_changes
#         run: |
#           if [[ -n "$(git status --porcelain)" ]]; then
#             echo "Local branch is not up to date with remote_branch. Pushing latest code to Git"
#           else
#             echo "Local branch is up to date with Remote branch."
#             exit 0
#           fi

#       - name: Commit files to Git
#         run: |
#           if [[ -n "$(git status --porcelain)" ]]; then
#             git commit -a -m "Apigee Artifacts Export Updates"
#             exit 0
#           fi

#       - name: Debug Git Status
#         run: |
#           git status

#       - name: Push changes to Git
#         run: |
#           git push origin artifacts
          
